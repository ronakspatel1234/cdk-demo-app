@import '../typography/typography';

*,
*::before,
*::after {
  box-sizing: border-box;
}

html {
  font-family: sans-serif;
  line-height: 1.15;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  -ms-overflow-style: scrollbar;
  -webkit-tap-highlight-color: rgba($dark-primary-text, 0);
}
// Shim for "new" HTML5 structural elements to display correctly (IE10, older browsers)
article, aside, figcaption, figure, footer, header, hgroup, main, nav, section {
  display: block;
}
// Body
body {
  margin: 15px;
  font-family: $font-family-base;
  font-size: $font-size-base;
  font-weight: $font-weight-base;
  line-height: $line-height-base;
  text-align: left;
  &[dir='rtl'] {
    text-align: right;
  }
}

p {
  margin-top: 0;
  margin-bottom: 1rem;
}

.fade {
  @include transition(opacity 10s linear);
  &:not(.show) {
    opacity: 0;
  }
}

// Transparent bg
.bg-transparent {
  background: transparent;
}

// Dropdown
.dropdown {
  position: relative;
  .dropdown-toggle::after {
    content: "";
    display: inline-block;
    width: 0;
    height: 0;
    margin-left: 0.255em;
    vertical-align: 0.255em;
    border-top: 0.3em solid;
    border-right: 0.3em solid transparent;
    border-bottom: 0;
    border-left: 0.3em solid transparent;
  }
  .dropdown-menu {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 1000;
    float: left;
    min-width: 5rem;
    padding: 0.5rem 0;
    margin: 0.125rem 0 0;
    font-size: $font-size-base * 0.9;
    color: #212529;
    text-align: left;
    list-style: none;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid rgba(0, 0, 0, 0.15);
    @include border-radius(0);
    &.bottom-right {
      right: 0;
      left: auto;
    }
    .dropdown-item {
      display: block;
      width: 100%;
      padding: 0.25rem 1.5rem;
      clear: both;
      font-weight: 400;
      color: #212529;
      text-align: inherit;
      white-space: nowrap;
      background-color: transparent;
      border: 0;
      &:hover,
      &:focus {
        color: #16181b;
        text-decoration: none;
        background-color: map-get($cmn-grey , 100);
      }
    }
    &.show {
      display: block;
    }
  }
  [dir='rtl'] & {
    .dropdown-menu {
      right: 0;
      left: auto;
      text-align: right;
      &.bottom-right {
        left: 0;
        right: auto;
      }
    }
  }
}

// Common Button css
button {
  cursor: pointer;
}
.btn {
  display: inline-block;
  font-weight: 400;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  @include user-select(none);
  border: 1px solid transparent;
  padding: 0.375rem 0.75rem;
  font-size: 1rem;
  line-height: 1.5;
  @include border-radius(0);
  @include transition(color 0.15s ease-in-out,background-color 0.15s ease-in-out,border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out);
  &:not(:disabled),
  &:not(.disabled) {
    cursor: pointer;
  }
}

/// Ripple effect of button
.ripple {
  background-position: center;
  @include transition(background 0.8s);
  &:hover {
    background: $cmn-button-color radial-gradient(circle, transparent 1%, $cmn-button-color 1%) center/15000%;
  }
  &:active {
    background-color: lighten($cmn-button-color, 5%);
    background-size: 100%;
    transition: background 0s;
  }
}

/// animtaion keyframes
/// clockwise animation keyframe
@-moz-keyframes clockwiseSpin {
  from { -moz-transform: rotate(0deg); }
  to { -moz-transform: rotate(360deg); }
}
@-webkit-keyframes clockwiseSpin {
  from { -webkit-transform: rotate(0deg); }
  to { -webkit-transform: rotate(360deg); }
}
@keyframes clockwiseSpin {
  from {transform:rotate(0deg);}
  to {transform:rotate(360deg);}
}

/// antiClockwise animation keyframe
@-moz-keyframes antiClockwiseSpin  {
  from { -moz-transform: rotate(360deg); }
  to { -moz-transform: rotate(0deg); }
}
@-webkit-keyframes antiClockwiseSpin  {
  from { -webkit-transform: rotate(360deg); }
  to { -webkit-transform: rotate(0deg); }
}
@keyframes antiClockwiseSpin  {
  from {transform:rotate(360deg);}
  to {transform:rotate(0deg);}
}

// Generate contextual modifier classes for justify-content.
@each $position, $value in $justify-content {
  .justify-content-#{$position} {
    justify-content: $value;
  }
}

// Generate contextual modifier classes for content alignment.
@each $position, $value in $align-items {
  .align-items-#{$position} {
    align-items: $value;
  }
}

// Generate contextual modifier classes for content position.
@each $position, $value in $content-position {
  .content-#{$position} {
    justify-content: nth($value, 1);
    align-items: nth($value, 2);
  }
}

@mixin cmn-core-theme($theme) {
  $background: map-get($theme, background);
  $foreground: map-get($theme, foreground);
  body {
    background-color: cmn-color($background, background);
    color: cmn-color($foreground, text);
  }
}