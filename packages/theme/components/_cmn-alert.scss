// This contains all of the styles for the alerts
// Define alert colors, border radius, and padding.
$alert-padding-y:         0.75rem !default;
$alert-padding-x:         1.25rem !default;
$alert-margin-bottom:     1rem !default;
$alert-link-font-weight:  700 !default;
$alert-border-width:      1px !default;

$alert-border-radius:       0px !default;
$alert-icon-size:           16px !default;
$alert-bg-level:            -10 !default; //Color level must be between -12 and 12
$alert-border-level:        -8 !default; //Color level must be between -12 and 12
$alert-color-level:         8 !default; //Color level must be between -12 and 12
$alert-accent-border-width: 5px !default;

// Close
$close-font-size:          1rem * 1.5 !default;

/// Default alert-variations
/// @type Map
/// @param {Number} $alert-border-radius - The default border-radius of alert.
/// @param {Number} $alert-icon-size - The default alert-icon font-size.
/// @param {Number} $alert-bg-level - The color level of alert background.
/// @param {Number} $alert-color-level - The color level of alert text-color.
/// @param {Number} $alert-border-level - The color level of alert border-color.
/// @param {List} $font-family-base - The default font-family of alert.

$alert-variations: () !default;
$alert-variations: map-merge(
  (
    'alert-border-radius':              $alert-border-radius,
    'alert-icon-size':                  $alert-icon-size,
    'alert-bg-level':                   $alert-bg-level,
    'alert-color-level':                $alert-color-level,
    'alert-border-level':               $alert-border-level,
    'alert-font-family':                $font-family-base,
  ),
  $alert-variations
);

// Define alert colors used for different type like [error, warning, info, success]
$error:              map-get($cmn-red, 500) !default;
$warning:            map-get($cmn-yellow, 500) !default;
$info:               map-get($cmn-cyan, 500) !default;
$success:            map-get($cmn-green, 500) !default;

/// Default alert-colors
/// @type Map
/// @param {Color} $error - [#f44336] - The 500 variant of the `cmn-red` color.
/// @param {Color} $warning - [#ffeb3b] - The 500 variant of the `cmn-yellow` color.
/// @param {Color} $info - [#00bcd4] - The 500 variant of the `cmn-cyan` color.
/// @param {Color} $success - [#4caf50] - The 500 variant of the `cmn-green` color.
$alert-colors: () !default;
$alert-colors: map-merge(
  (
    'error':              $error,
    'warning':            $warning,
    'info':               $info,
    'success':            $success,
  ),
  $alert-colors
);

/// Default alert-font-size
/// @type Map
/// Define various alert style depends on alert font-size.
$alert-font-size: (
  'mini':             0.7rem,
  'tiny':             0.8rem,
  'small':            0.9rem,
  'large':            1rem,
  'big':              1.2rem,
  'huge':             1.4rem,
  'massive':          1.6rem,
);

/// alert-variant
/// @param {Color} $background - The background color of the alert-box.
/// @param {Color} $color - The color of the alert-text.
/// @param {Color} $border-color - The border color of the alert-box.
// Define a mixin 
@mixin alert-variant($background, $color, $border-color) {
  background: $background;
  color: $color;
  border-color: $border-color;

  &.left-accent-border {
    border-left-color: darken($background, 30%);
  }
  .alert-link {
    color: darken($color, 10%);
  }

  .alert-icon {
    span {
      color: darken($color, 10%);
    }
  }
  &[dir='rtl'],
  [dir='rtl'] & {
    &.left-accent-border {
      border-left-color: $border-color;
      border-right-color: darken($background, 30%);
    }
  }
}

// Generate contextual modifier classes for font-size of alert: [mini, tiny, small, large, big, huge, massive]
@each $size, $value in $alert-font-size {
  .alert {
    &.#{$size} {
      font-size: $value;
    }
  }
}

// Base style
button:focus {
  outline: 0;
}
.alert {
  display: flex;
  position: relative;
  font-family: inherit;
  line-height: 1.5;
  padding: $alert-padding-y $alert-padding-x;
  margin-bottom: $alert-margin-bottom;
  border: $alert-border-width solid transparent;
  border-radius: map-get($alert-variations, 'border-radius');
  text-align: left;
  
  .alert-item{
    display: flex;
    flex: 1 1 auto;
    .alert-icon {
      align-self: start;
      margin-right: 0.75rem;
      span {
        font-size: map-get($alert-variations, 'font-size');
      }
    }
    .alert-text {
      align-self: baseline;
      flex-grow: 1;
      margin-right: 0.75rem;
      a {
        font-weight: $alert-link-font-weight;
        text-decoration: none;
        color: inherit;
        &:hover {
          text-decoration: underline;
        }
      }
    }
    .alert-action {
      color: inherit;
      .action-button {
        background: transparent;
        border: 0;
        cursor: pointer;
        color: inherit;
        font-family: inherit;
        &.dropdown-toggle {
          position: relative;
          padding: 0 15px 0 0;
          margin-right: 5px;
          &::after {
            position: absolute;
            right: 0;
            top: 50%;
            @include transform(translateY(-50%));
          }
        }
      }
      a {
        color: inherit;
        text-decoration: none;
        &.dropdown-item {
          cursor: pointer;
        }
      }
    }
  }
  &.left-accent-border {
    border: 0;
    border-left: $alert-accent-border-width solid transparent;
  }
  &[dir='rtl'], 
  [dir='rtl'] & {
    text-align: right;
    &.left-accent-border {
      border-left: 0;
      border-right: $alert-accent-border-width solid transparent;
    }
    .alert-icon {
      margin-right: 0;
      margin-left: 0.75rem;
    }
    .alert-text {
      margin-right: 0;
      margin-left: 0.75rem;
    }
  }
}
.alert-heading {
  margin-top: 0;
  margin-bottom: .5rem;
  color: inherit;
}

// Dismissible alerts
// Expand the right padding and account for the close button's positioning.
.alert-dismissible {
  display: flex;
  margin-left: auto;
  align-items: baseline;
  cursor: pointer;
  opacity: 0.7;
  // Adjust close link position
  .close {
    color: inherit;
    background: transparent;
    border: 0;
    font-size: inherit;
  }
  &:hover {
    opacity: 1;
  }
}

/// cmn-alert-theme
/// @param {Map} $theme - The theme used as basis for styling the component.
/// @param {Map} $alert - The alert used to customise default style
/// @param {Map} $alert-variations - The alert-variations used for default component style.
/// @param {Map} $alert-colors - The alert-colors contain various color of alert.
/// @param {Number} $alert-bg-level - The color level of alert background.
/// @param {Number} $alert-color-level - The color level of alert text-color.
/// @param {Number} $alert-border-level - The color level of alert border-color.
/// @requires {mixin} alert-variant
/// @requires custom-map-validation
/// @requires theme-color-level
@mixin cmn-alert-theme($theme) {

  @if variable-exists(alert) {
    @each $key, $value in $alert {
      $result: custom-map-validation($alert, $key, $alert-variations);
      @if ($result) {
        @error 'Alert: #{$result}';
      }
    }
  }

  .alert {
    @if(variable-exists(alert)) {
      font-family: map-get($alert, 'alert-font-family');
      border-radius: map-get($alert, 'alert-border-radius');
    }
    .alert-icon {
      span {
        @if(variable-exists(alert)) {
          font-size: map-get($alert, 'alert-icon-size');
        }
      }
    }
  }

  // Alternate styles
  // Generate contextual modifier classes for colorizing the alert. [error, warning, success, info]
  @each $color, $value in $alert-colors {
    .alert-#{$color} {
      @include alert-variant(
        theme-color-level($value, if(variable-exists(alert) AND (map-get($alert, 'alert-bg-level') != null), map-get($alert, 'alert-bg-level'), $alert-bg-level)),
        theme-color-level($value, if(variable-exists(alert) AND (map-get($alert, 'alert-color-level') != null), map-get($alert, 'alert-color-level'), $alert-color-level)), 
        theme-color-level($value, if(variable-exists(alert) AND (map-get($alert, 'alert-border-level') != null), map-get($alert, 'alert-border-level'), $alert-border-level))
      );
    }
  }
}